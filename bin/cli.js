#!/usr/bin/env node
import { cac } from 'cac';
import { resolve } from 'node:path';
import { cwd, exit, env } from 'node:process';
import { pathToFileURL } from 'node:url';
import { emptyDir, pathExists } from 'fs-extra';
import * as f from 'esbuild';
import u from 'fast-glob';
import p from 'lodash.foreach';
import A from 'lodash.map';
import { config } from 'dotenv';
import I from 'node-fetch';
import v from 'ora';
import c from 'ansi-styles';

function _(e="Deploying your files..."){return v({text:e,indent:1})}var w=[{level:"info",color:"cyanBright",prefix:"[INFO]"},{level:"log",color:"greenBright",prefix:"[SUCCESS]"},{level:"warn",color:"yellow",prefix:"[WARNING]"},{level:"error",color:"redBright",prefix:"[ERROR]"}],C=process.argv.slice(2).filter(e=>e==="--debug"),n={_log:function(e,r="info"){let s=w.find(o=>o.level===r);s&&C?console[r](c[s.color].open,s.prefix,e,c[s.color].close):s?.level==="error"&&console[r](c[s.color].open,s.prefix,e,c[s.color].close);},spinner:_};var{_log:i,spinner:L}=n,a=L(),m={};async function O(e){if(e.length)try{i("Processing: "+e),await f.build({entryPoints:[e],allowOverwrite:!0,target:"node16",format:"esm",bundle:!0,minify:!0,outdir:"build",write:!0,packages:"external"});}catch(r){i(r.message,"error");}else throw new TypeError("filePath must be Valid.")}async function N(){let e=await u("build/**/*.js",{absolute:!0,ignore:["node_modules"]}),r=await Promise.all(A(e,async s=>{let o=await import(pathToFileURL(s).href).then(t=>t.default);if(o.data)return o.data.toJSON();if(o.name)return o}));return P(r),r}async function P(e){let r=m.test&&"GUILD_TEST_ID"in env?env.GUILD_TEST_ID:env.GUILD_ID,s=env.BOT_TOKEN;if(r?.length&&e.length&&s?.length)try{a.start();let o=await I(`https://discord.com/api/v10/applications/${env.CLIENT_ID}/guilds/${r}/commands`,{method:"PUT",headers:{Authorization:`Bot ${s}`,"Content-Type":"application/json"},body:JSON.stringify(e)}).then(t=>(t.status===200,t.json()));if(Array.isArray(o))p(o,t=>a.succeed("Deployed: /"+t.name)),a.stop(),exit(0);else if(o.retry_after)a.warn(`RATE_LIMIT_EXCEDED (https://discord.com/developers/docs/topics/rate-limits#rate-limits)
Try again in ${Math.floor(o.retry_after)} second(s).`);else if(o.errors){a.stop();let t=o.errors;p(Object.keys(t),b=>{p(t[b]._errors,E=>i(E.message,"error"));});}else i("REQUEST_FAILED","error");}catch(o){a.stop(),i("FATAL: "+o,"error");}else return i('PLease verify your env file, and if "commands" directory exists anywhere in your project with valid commands files',"error"),!1}async function R(){let e=u.stream("**/commands/**/*.{js,cjs,mjs,ts}",{cwd:m.cwd,absolute:!0,ignore:["node_modules"]});e.on("readable",async()=>{e.pause(),await O(e.read().toString()),e.resume();}),e.on("error",r=>i(r,"error")),e.on("end",N);}async function y(e){if(e.cwd&&await pathExists(e.cwd))config({path:resolve(e.cwd,".env"),debug:e.debug}).error?i("PLease verify your .env file.","error"):(m=Object.assign(e,m),await R());else throw i("Please verify cwd.","error"),new TypeError("Options is required.")}var g="2.1.0";var d=cac("discord_deploy");d.command("deploy").option("--debug, -d","run in debug mode.",{default:!1}).option("cwd <dir>","Absolute directory to search for.",{default:cwd()}).option("--test","Enables test mode.",{default:!1}).action(y);d.command("clear","clear esbuild cache.").action(async()=>{try{(await emptyDir("build")).length?n._log("Cleaned successfully.","log"):n._log("Already Cleaned."),exit(0);}catch(e){n._log(e.message,"error"),exit(1);}});d.help();d.version(g);d.parse();
