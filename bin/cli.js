#!/usr/bin/env node
import{cac as P}from"cac";import{resolve as w}from"node:path";import{cwd as C,env as a,exit as S}from"node:process";import{pathToFileURL as D}from"node:url";import*as f from"esbuild";import u from"fast-glob";import m from"lodash.foreach";import I from"lodash.map";import{config as T}from"dotenv";import L from"node-fetch";import v from"ora";import c from"ansi-styles";function E(e="Deploying your files..."){return v({text:e,indent:1})}var _=[{level:"info",color:"cyanBright",prefix:"[INFO]"},{level:"log",color:"greenBright",prefix:"[SUCCESS]"},{level:"warn",color:"yellow",prefix:"[WARNING]"},{level:"error",color:"redBright",prefix:"[ERROR]"}],p={_log:function(e,r="info"){let s=_.find(o=>o.level===r);s&&console[r](c[s.color].open,s.prefix,e,c[s.color].close)},spinner:E};var{_log:i,spinner:O}=p,n=O(),l={};async function j(e){if(e.length)try{i("Processing: "+e),await f.build({entryPoints:[e],allowOverwrite:!0,target:"node16",format:"esm",bundle:!0,minify:!0,outdir:"build",write:!0,packages:"external"})}catch(r){i(r.message,"error")}else throw new TypeError(`filePath must be a Valid String. Received string length: ${e.length}`)}async function A(){let e=await u("build/**/*.js",{absolute:!0,ignore:["node_modules"]}),r=await Promise.all(I(e,async s=>{let o=await import(D(s).href).then(t=>t.default);if(o.data)return o.data.toJSON();if(o.name)return o}));x(r)}async function x(e){let r=l.test&&"GUILD_TEST_ID"in a?a.GUILD_TEST_ID:a.GUILD_ID,s=a.BOT_TOKEN;if(r?.length&&e.length&&s?.length)try{n.start();let o=await L(`https://discord.com/api/v10/applications/${a.CLIENT_ID}/guilds/${r}/commands`,{method:"PUT",headers:{Authorization:`Bot ${s}`,"Content-Type":"application/json"},body:JSON.stringify(e)}).then(t=>(t.status===200,t.json()));if(Array.isArray(o))m(o,t=>n.succeed("Deployed: /"+t.name)),n.stop(),S(0);else if(o.retry_after)n.warn(`RATE_LIMIT_EXCEDED (https://discord.com/developers/docs/topics/rate-limits#rate-limits)
Try again in ${Math.floor(o.retry_after)} second(s).`);else if(o.errors){n.stop();let t=o.errors;m(Object.keys(t),h=>{m(t[h]._errors,b=>i(b.message,"error"))})}else i("REQUEST_FAILED","error")}catch(o){n.stop(),i("FATAL: "+o,"error")}else return i('PLease verify your env file, and if "commands" directory exists anywhere in your project with valid commands files',"error"),!1}async function R(){let e=u.stream("**/commands/**/*.{js,cjs,mjs,ts}",{cwd:l.cwd,absolute:!0});e.on("readable",async()=>{await j(e.read().toString())}),e.on("error",r=>i(r,"error")),e.on("end",A)}async function y(e){T({path:w(e.cwd||C(),".env"),debug:e.debug}).error?i("PLease verify your .env file, or if cwd path exists.","error"):(l=Object.assign(e,l),await R())}var g="1.0.16";var d=P("discord_deploy");d.command("deploy").action(e=>y(e)).option("debug","run in debug mode.",{default:!1}).option("cwd <dir>","Absolute directory to search for.",{default:process.cwd()}).option("test","Enables test mode (Requires GUILD_TEST_ID env key).",{default:!1});d.help();d.version(g);d.parse();
