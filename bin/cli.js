#!/usr/bin/env node
import{cac as G}from"cac";import{relative as C,resolve as S}from"node:path";import{cwd as j,env as n,exit as I}from"node:process";import L from"fast-glob";import l from"lodash.foreach";import T from"normalize-path";import{config as x}from"dotenv";import A from"node-fetch";import{dirname as h}from"node:path";import{exit as _}from"node:process";import v from"ora";import{fileURLToPath as E}from"node:url";import m from"ansi-styles";function c(e="Deploying your files..."){return v({text:e,indent:1})}var b=[{level:"info",color:"cyanBright",prefix:"[INFO]"},{level:"log",color:"greenBright",prefix:"[SUCCESS]"},{level:"warn",color:"yellow",prefix:"[WARNING]"},{level:"error",color:"redBright",prefix:"[ERROR]"}],w=process.argv.some(e=>e==="--debug"),D=E(import.meta.url),p={_log:function(e,r="info"){let o=b.find(s=>s.level===r);w&&o?console[r](m[o.color].open,o.prefix,e,m[o.color].close):r==="error"&&(c().fail("An error was ocurred. use --debug to see the details."),_(1))},__dirname:h(D),spinner:c};var{_log:t,__dirname:O,spinner:N}=p,i=N(),a=[];async function R(e){if(e.length){let r=await import(T(C(O,e))).then(o=>o.default);t("Processing: "+e),r.data?a.push(r.data.toJSON()):r.name?a.push(r):t(`File Not Valid: ${e}`,"error")}else throw new TypeError(`filePath must be a Valid String. Received: ${e.length}`)}async function F(e=!1){let r=e&&"GUILD_TEST_ID"in n?n.GUILD_TEST_ID:n.GUILD_ID;if(r&&a.length)try{i.start();let o=await A(`https://discord.com/api/v10/applications/${n.CLIENT_ID}/guilds/${r}/commands`,{method:"PUT",headers:{Authorization:`Bot ${n.TOKEN}`,"Content-Type":"application/json"},body:JSON.stringify(a)}).then(s=>(s.status===200,s.json()));if(Array.isArray(o))l(o,s=>i.succeed("Deployed: /"+s.name)),i.stop(),I(0);else if(o.retry_after)i.warn(`RATE_LIMIT_EXCEDED (https://discord.com/developers/docs/topics/rate-limits#rate-limits)
Try again in ${Math.floor(o.retry_after)} second(s).`);else if(o.errors){i.stop();let s=o.errors;l(Object.keys(s),y=>{l(s[y]._errors,g=>t(g.message,"error"))})}else t("REQUEST_FAILED","error")}catch(o){i.stop(),t("FATAL: "+o,"error")}else return t('PLease verify your .env file, and if "commands" directory exists anywhere in your project with valid commands files',"error"),!1}async function U(e){let r=L.stream("**/commands/**/*.{js,cjs,mjs}",{cwd:e.cwd,absolute:!0});r.on("data",async o=>{r.pause(),await R(o.toString()),r.resume()}),r.on("error",o=>t(o,"error")),r.on("end",async()=>await F(e.test))}async function f(e){x({path:S(e.cwd||j(),".env"),debug:e.debug}),await U(e)}var u="1.0.16";var d=G("discord_deploy");d.command("deploy").action(e=>f(e)).option("debug","run in debug mode.",{default:!1}).option("cwd <dir>","Absolute directory to search for.",{default:process.cwd()}).option("test","Enables test mode (Requires GUILD_TEST_ID env key).",{default:!1});d.help();d.version(u);d.parse();